name: Build, push and deploy app in AWS ECS
description: Build and push Docker images with Buildx
author: alesson.viana@gmail.com
branding:
  icon: 'anchor'
  color: 'blue'
inputs:
  aws_region:
    description: 'AWS region'
    required: true
  ecs_cluster:
    description: 'ECS cluster name'
    required: true
  service:
    description: 'ECS service name'
    required: true
  aws-access-key-id:
    description: 'Pass was access key id'
    required: true
  aws-secret-access-key:
    description: 'Pass was secret access key'
    required: true
on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install
        working-directory: ./super-aplicacao-de-pisos

      - name: Build the artifact
        run: npm run build
        working-directory: ./super-aplicacao-de-pisos

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws_region }}
          aws-access-key-id: ${{ inputs.aws-access-key-id }}
          aws-secret-access-key: ${{ inputs.aws-secret-access-key }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: sha-${{ github.sha }}
        run: |
          # Copiar artefatos buildados para diretório temporário
          mkdir -p ./temp_dist
          cp -r ./super-aplicacao-de-pisos/dist ./temp_dist/

          # Build da imagem Docker
          docker build --no-cache -f app/Dockerfile -t $ECR_REGISTRY/${{ inputs.service }}:$IMAGE_TAG ./temp_dist
          docker push $ECR_REGISTRY/${{ inputs.service }}:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/${{ inputs.service }}:$IMAGE_TAG"
        shell: bash

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ github.workspace }}/.aws/task-definition.json
          container-name: ${{ inputs.service }}-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.service }}
          cluster: ${{ inputs.ecs_cluster }}
          wait-for-service-stability: true
